name: CI/CD – Django with Docker Compose and GKE

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env: # <--- ¡Añadimos estas variables de entorno globales!
  PROJECT_ID: dynamic-circle-340414 # Tu Project ID de Google Cloud
  GKE_CLUSTER: autopilot-cluster-1  # El nombre de tu clúster GKE
  GKE_REGION: us-central1         # La región de tu clúster GKE
  DOCKER_IMAGE_NAME: hack4u2/devsu-demo-devops-python # Nombre base de tu imagen Docker
  # Asegúrate de que este nombre de imagen coincide con el que usarás en tu Deployment de Kubernetes

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: 🧾 Checkout repo
        uses: actions/checkout@v3

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: 📦 Install main dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: 📌 Set environment variables
        run: |
          echo "DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}" >> $GITHUB_ENV
          echo "DATABASE_NAME=db.sqlite3" >> $GITHUB_ENV
          echo "ALLOWED_HOSTS=0.0.0.0,localhost" >> $GITHUB_ENV

      - name: 📏 Run flake8 (lint)
        run: |
          flake8 . --exclude=venv,migrations --max-line-length=120

      - name: ✅ Run tests with coverage
        run: |
          coverage run manage.py test
          coverage report -m

  deploy:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: 🧾 Checkout repo
        uses: actions/checkout@v3

      # --- Autenticación y configuración para Google Cloud y GKE ---
      - name: 🔐 Google Cloud Authentication
        uses: google-github-actions/auth@v2
        with:
          # Es CRÍTICO que GCP_SA_KEY sea el JSON completo y válido
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          # project_id NO es necesario aquí si ya está en la clave JSON o se configura globalmente
          # Pero no hace daño si lo dejas. Lo definimos como env.PROJECT_ID arriba.
          # project_id: ${{ env.PROJECT_ID }} # <-- Se puede omitir aquí si GCP_SA_KEY tiene el Project ID.

      - name: 📦 Configure kubectl for GKE
        uses: google-github-actions/get-gke-credentials@v2
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_REGION }} # Para clústeres regionales, usa --region. Para zonales, usa --zone.
                                        # Como es Autopilot, `--region` es lo correcto.
          project_id: ${{ env.PROJECT_ID }}
      # --- FIN Autenticación y configuración para Google Cloud y GKE ---


      # --- Revisa esta parte para la autenticación de Docker Hub vs. Google Artifact Registry ---
      # Si tu imagen de Docker YA ESTÁ en Docker Hub y solo la vas a usar desde allí:
      - name: 🔐 Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: 🛠️ Build and Push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          # IMPORTANTE: Usamos el mismo tag 'latest' que en el Dockerfile
          # Si quieres versionar, usa algo como ${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}
          tags: ${{ env.DOCKER_IMAGE_NAME }}:latest

      # --- ALTERNATIVA: Si quieres usar Google Artifact Registry (MÁS RECOMENDADO para GKE) ---
      # Si quieres publicar tu imagen en Google Artifact Registry (o Container Registry),
      # DEBERÍAS eliminar los pasos de Docker Hub (Login y Build/Push) y usar esto:
      # - name: 🔐 Authenticate Docker to Google Artifact Registry
      #   run: gcloud auth configure-docker us-central1-docker.pkg.dev # Ajusta la región de tu registry si es diferente
      #   # Necesitarás los permisos 'Artifact Registry Writer' o 'Storage Admin' para tu Service Account.

      # - name: 🛠️ Build and Push Docker image to Artifact Registry
      #   run: |
      #     docker build -t us-central1-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }} . # o :latest
      #     docker push us-central1-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }} # o :latest
      # --- FIN ALTERNATIVA ---


      - name: 🚀 Deploy to Kubernetes
        # Aquí ya no necesitas K8S_API_SERVER ni K8S_TOKEN,
        # porque get-gke-credentials ya configuró kubectl.
        # Asegúrate de que tu script deploy.sh NO intente cambiar de contexto a "minikube"
        # y que use comandos kubectl directamente (ej. kubectl apply -f ...).
        run: bash .github/scripts/deploy.sh
        # env: # <--- Puedes eliminar estas variables de entorno si no se usan en deploy.sh
        #   K8S_API_SERVER: ${{ secrets.K8S_API_SERVER }}
        #   K8S_TOKEN: ${{ secrets.K8S_TOKEN }}
